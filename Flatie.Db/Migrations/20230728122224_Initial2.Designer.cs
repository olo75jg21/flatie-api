// <auto-generated />
using System;
using Flatie.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Flatie.Db.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230728122224_Initial2")]
    partial class Initial2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Flatie.Db.Entities.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HomeSpaceId")
                        .HasColumnType("integer");

                    b.Property<int>("InvitedByUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("HomeSpaceId");

                    b.HasIndex("InvitedByUserId");

                    b.ToTable("Guest");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9840),
                            End = new DateTime(2023, 7, 31, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9844),
                            HomeSpaceId = 1,
                            InvitedByUserId = 1,
                            Name = "Guest 1",
                            Start = new DateTime(2023, 7, 29, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9843)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9846),
                            End = new DateTime(2023, 8, 1, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9847),
                            HomeSpaceId = 1,
                            InvitedByUserId = 2,
                            Name = "Guest 2",
                            Start = new DateTime(2023, 7, 30, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9847)
                        });
                });

            modelBuilder.Entity("Flatie.Db.Entities.HomeSpace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HomeSpace");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9616),
                            Name = "Living Room"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9619),
                            Name = "Kitchen"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9643),
                            Name = "Bedroom"
                        });
                });

            modelBuilder.Entity("Flatie.Db.Entities.HomeSpaceMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HomeSpaceId")
                        .HasColumnType("integer");

                    b.Property<int>("HomeSpaceMemberRoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HomeSpaceId");

                    b.HasIndex("HomeSpaceMemberRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("HomeSpaceMembers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9805),
                            HomeSpaceId = 1,
                            HomeSpaceMemberRoleId = 1,
                            JoinedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9806),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9809),
                            HomeSpaceId = 1,
                            HomeSpaceMemberRoleId = 2,
                            JoinedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9809),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9810),
                            HomeSpaceId = 2,
                            HomeSpaceMemberRoleId = 3,
                            JoinedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9810),
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9811),
                            HomeSpaceId = 3,
                            HomeSpaceMemberRoleId = 3,
                            JoinedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9812),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("Flatie.Db.Entities.HomeSpaceMemberRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HomeSpaceMemberRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9788),
                            Role = "Owner"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9788),
                            Role = "Admin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9789),
                            Role = "Member"
                        });
                });

            modelBuilder.Entity("Flatie.Db.Entities.HomeSpacePreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HomeSpaceId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HomeSpaceId");

                    b.HasIndex("UserId");

                    b.ToTable("HomeSpacePreference");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9823),
                            Description = "Preference 1 description",
                            HomeSpaceId = 1,
                            Title = "Preference 1",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9825),
                            Description = "Preference 2 description",
                            HomeSpaceId = 1,
                            Title = "Preference 2",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Flatie.Db.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HomeSpaceId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NotificationTypeId")
                        .HasColumnType("integer");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HomeSpaceId");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9660),
                            HomeSpaceId = 1,
                            Message = "Notification 1",
                            NotificationTypeId = 1,
                            Read = false,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9663),
                            HomeSpaceId = 1,
                            Message = "Notification 2",
                            NotificationTypeId = 2,
                            Read = true,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Flatie.Db.Entities.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("NotificationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9863),
                            TypeName = "Important"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9865),
                            TypeName = "Regular"
                        });
                });

            modelBuilder.Entity("Flatie.Db.Entities.QuietHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HomeSpaceId")
                        .HasColumnType("integer");

                    b.Property<int?>("QuietHourImportanceId")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HomeSpaceId");

                    b.HasIndex("QuietHourImportanceId");

                    b.HasIndex("UserId");

                    b.ToTable("QuietHour");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9722),
                            End = new DateTime(2023, 7, 28, 14, 22, 24, 446, DateTimeKind.Utc).AddTicks(9724),
                            HomeSpaceId = 1,
                            QuietHourImportanceId = 1,
                            Reason = "Study time",
                            Start = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9724),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9732),
                            End = new DateTime(2023, 7, 30, 14, 22, 24, 446, DateTimeKind.Utc).AddTicks(9733),
                            HomeSpaceId = 1,
                            QuietHourImportanceId = 2,
                            Reason = "Quiet reading",
                            Start = new DateTime(2023, 7, 30, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9732),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Flatie.Db.Entities.QuietHourImportance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("QuietHourImportance");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9750),
                            Rank = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9751),
                            Rank = 2
                        });
                });

            modelBuilder.Entity("Flatie.Db.Entities.ShoppingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HomeSpaceId")
                        .HasColumnType("integer");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PucharsedByUserId")
                        .HasColumnType("integer");

                    b.Property<int>("PurchasePrice")
                        .HasColumnType("integer");

                    b.Property<int?>("RequestedByUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("HomeSpaceId");

                    b.HasIndex("PucharsedByUserId");

                    b.HasIndex("RequestedByUserId");

                    b.ToTable("ShoppingList");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9678),
                            HomeSpaceId = 1,
                            ItemName = "Milk",
                            PucharsedByUserId = 1,
                            PurchasePrice = 5,
                            RequestedByUserId = 2
                        },
                        new
                        {
                            Id = 2,
                            Amount = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9686),
                            HomeSpaceId = 1,
                            ItemName = "Bread",
                            PucharsedByUserId = 2,
                            PurchasePrice = 3,
                            RequestedByUserId = 1
                        });
                });

            modelBuilder.Entity("Flatie.Db.Entities.ShoppingListCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ShoppingListCategory");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9704),
                            Name = "Dairy"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9706),
                            Name = "Bakery"
                        });
                });

            modelBuilder.Entity("Flatie.Db.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int?>("UserAppRoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserAppRoleId");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9517),
                            PasswordHash = new byte[] { 1, 118, 189, 189, 101, 106, 165, 127, 92, 202, 49, 181, 123, 81, 226, 9, 193, 18, 210, 172, 78, 208, 79, 188, 226, 54, 86, 186, 23, 36, 144, 47, 114, 72, 220, 249, 57, 9, 94, 200, 162, 140, 74, 100, 159, 164, 236, 96, 174, 13, 106, 168, 94, 67, 174, 63, 105, 39, 61, 120, 76, 239, 26, 216 },
                            PasswordSalt = new byte[] { 91, 75, 187, 103, 246, 159, 243, 143, 56, 80, 67, 43, 247, 166, 125, 156, 75, 181, 175, 158, 79, 252, 239, 147, 187, 181, 54, 4, 225, 127, 148, 26, 171, 151, 102, 78, 234, 239, 44, 231, 25, 134, 130, 222, 54, 182, 109, 102, 22, 186, 188, 148, 209, 209, 235, 246, 11, 239, 227, 211, 189, 124, 128, 70, 46, 96, 26, 169, 155, 108, 237, 94, 182, 81, 19, 139, 104, 56, 203, 252, 91, 19, 160, 151, 199, 192, 68, 193, 168, 87, 81, 197, 193, 193, 109, 136, 119, 116, 54, 58, 186, 165, 44, 191, 143, 181, 203, 252, 70, 67, 87, 23, 152, 245, 50, 69, 31, 11, 189, 55, 146, 77, 224, 153, 131, 171, 228, 149 },
                            UserAppRoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9563),
                            PasswordHash = new byte[] { 175, 23, 225, 233, 67, 68, 244, 211, 16, 142, 93, 50, 28, 114, 5, 178, 79, 218, 169, 217, 113, 187, 24, 149, 142, 5, 118, 86, 62, 190, 240, 112, 59, 9, 100, 199, 165, 50, 190, 112, 43, 53, 4, 116, 183, 137, 228, 245, 151, 47, 84, 38, 183, 37, 187, 76, 2, 35, 79, 43, 118, 169, 112, 145 },
                            PasswordSalt = new byte[] { 82, 218, 195, 249, 97, 118, 113, 231, 185, 87, 206, 203, 237, 83, 112, 210, 132, 121, 72, 24, 76, 52, 65, 191, 210, 242, 29, 132, 95, 200, 117, 250, 179, 88, 147, 135, 204, 1, 23, 249, 223, 212, 155, 9, 140, 225, 12, 187, 15, 98, 251, 20, 147, 182, 182, 242, 155, 172, 18, 140, 176, 212, 37, 36, 97, 167, 53, 127, 133, 202, 5, 233, 89, 169, 57, 141, 166, 249, 250, 111, 57, 87, 137, 138, 254, 164, 61, 91, 145, 55, 26, 229, 88, 96, 7, 248, 232, 198, 254, 101, 182, 24, 152, 35, 231, 154, 120, 243, 12, 56, 38, 77, 20, 123, 177, 250, 48, 159, 131, 55, 72, 91, 141, 237, 10, 71, 78, 118 },
                            UserAppRoleId = 2,
                            Username = "user1"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9596),
                            PasswordHash = new byte[] { 150, 252, 192, 240, 48, 82, 180, 18, 63, 89, 230, 29, 180, 63, 68, 118, 54, 18, 82, 68, 78, 20, 51, 139, 119, 34, 72, 8, 229, 124, 219, 201, 144, 115, 215, 58, 191, 49, 172, 171, 21, 92, 9, 11, 50, 102, 3, 222, 154, 142, 151, 152, 226, 10, 218, 110, 206, 156, 242, 224, 196, 196, 94, 124 },
                            PasswordSalt = new byte[] { 180, 202, 22, 8, 152, 224, 205, 158, 252, 9, 254, 167, 144, 171, 192, 209, 173, 137, 50, 39, 74, 227, 201, 75, 228, 49, 41, 190, 166, 33, 50, 229, 179, 63, 164, 79, 102, 199, 196, 17, 47, 32, 221, 231, 78, 136, 34, 159, 88, 46, 154, 202, 86, 123, 77, 239, 26, 253, 29, 25, 33, 61, 127, 206, 212, 246, 23, 33, 75, 103, 118, 127, 245, 97, 223, 218, 116, 140, 46, 136, 27, 20, 69, 217, 201, 171, 209, 20, 200, 222, 219, 86, 143, 232, 5, 69, 23, 65, 166, 200, 167, 69, 163, 156, 48, 42, 64, 108, 62, 66, 94, 163, 172, 21, 27, 50, 143, 187, 7, 49, 191, 53, 50, 233, 80, 210, 247, 56 },
                            UserAppRoleId = 2,
                            Username = "user2"
                        });
                });

            modelBuilder.Entity("Flatie.Db.Entities.UserAppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserAppRole");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9167),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9170),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Flatie.Db.Entities.UserTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("HomeSpaceId")
                        .HasColumnType("integer");

                    b.Property<int>("RewardPoints")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HomeSpaceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTask");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Completed = false,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9765),
                            Description = "Finish the project by next week",
                            DueDate = new DateTime(2023, 8, 4, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9767),
                            HomeSpaceId = 1,
                            RewardPoints = 100,
                            Title = "Complete assignment",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Completed = true,
                            CreatedAt = new DateTime(2023, 7, 28, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9769),
                            Description = "Get milk, eggs, and bread",
                            DueDate = new DateTime(2023, 7, 30, 12, 22, 24, 446, DateTimeKind.Utc).AddTicks(9770),
                            HomeSpaceId = 1,
                            RewardPoints = 50,
                            Title = "Buy groceries",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Flatie.Db.Entities.Guest", b =>
                {
                    b.HasOne("Flatie.Db.Entities.HomeSpace", "HomeSpace")
                        .WithMany("Guests")
                        .HasForeignKey("HomeSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flatie.Db.Entities.User", "User")
                        .WithMany("Guests")
                        .HasForeignKey("InvitedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeSpace");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flatie.Db.Entities.HomeSpaceMember", b =>
                {
                    b.HasOne("Flatie.Db.Entities.HomeSpace", "HomeSpace")
                        .WithMany("HomeSpaceMembers")
                        .HasForeignKey("HomeSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flatie.Db.Entities.HomeSpaceMemberRole", "HomeSpaceMemberRole")
                        .WithMany("HomeSpaceMembers")
                        .HasForeignKey("HomeSpaceMemberRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flatie.Db.Entities.User", "User")
                        .WithMany("HomeSpaceMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeSpace");

                    b.Navigation("HomeSpaceMemberRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flatie.Db.Entities.HomeSpacePreference", b =>
                {
                    b.HasOne("Flatie.Db.Entities.HomeSpace", "HomeSpace")
                        .WithMany()
                        .HasForeignKey("HomeSpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Flatie.Db.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeSpace");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flatie.Db.Entities.Notification", b =>
                {
                    b.HasOne("Flatie.Db.Entities.HomeSpace", "HomeSpace")
                        .WithMany("Notifications")
                        .HasForeignKey("HomeSpaceId");

                    b.HasOne("Flatie.Db.Entities.NotificationType", "Type")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTypeId");

                    b.HasOne("Flatie.Db.Entities.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("HomeSpace");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flatie.Db.Entities.QuietHour", b =>
                {
                    b.HasOne("Flatie.Db.Entities.HomeSpace", "HomeSpace")
                        .WithMany("QuietHours")
                        .HasForeignKey("HomeSpaceId");

                    b.HasOne("Flatie.Db.Entities.QuietHourImportance", "Importance")
                        .WithMany("QuietHours")
                        .HasForeignKey("QuietHourImportanceId");

                    b.HasOne("Flatie.Db.Entities.User", "User")
                        .WithMany("QuietHours")
                        .HasForeignKey("UserId");

                    b.Navigation("HomeSpace");

                    b.Navigation("Importance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flatie.Db.Entities.ShoppingList", b =>
                {
                    b.HasOne("Flatie.Db.Entities.ShoppingListCategory", "Category")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("CategoryId");

                    b.HasOne("Flatie.Db.Entities.HomeSpace", "HomeSpace")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("HomeSpaceId");

                    b.HasOne("Flatie.Db.Entities.User", "PuchasedByUser")
                        .WithMany("ShoppingLists")
                        .HasForeignKey("PucharsedByUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Flatie.Db.Entities.User", "RequestedByUser")
                        .WithMany()
                        .HasForeignKey("RequestedByUserId");

                    b.Navigation("Category");

                    b.Navigation("HomeSpace");

                    b.Navigation("PuchasedByUser");

                    b.Navigation("RequestedByUser");
                });

            modelBuilder.Entity("Flatie.Db.Entities.User", b =>
                {
                    b.HasOne("Flatie.Db.Entities.UserAppRole", "UserAppRole")
                        .WithMany("Users")
                        .HasForeignKey("UserAppRoleId");

                    b.Navigation("UserAppRole");
                });

            modelBuilder.Entity("Flatie.Db.Entities.UserTask", b =>
                {
                    b.HasOne("Flatie.Db.Entities.HomeSpace", "HomeSpace")
                        .WithMany("UserTasks")
                        .HasForeignKey("HomeSpaceId");

                    b.HasOne("Flatie.Db.Entities.User", "User")
                        .WithMany("UserTasks")
                        .HasForeignKey("UserId");

                    b.Navigation("HomeSpace");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Flatie.Db.Entities.HomeSpace", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("HomeSpaceMembers");

                    b.Navigation("Notifications");

                    b.Navigation("QuietHours");

                    b.Navigation("ShoppingLists");

                    b.Navigation("UserTasks");
                });

            modelBuilder.Entity("Flatie.Db.Entities.HomeSpaceMemberRole", b =>
                {
                    b.Navigation("HomeSpaceMembers");
                });

            modelBuilder.Entity("Flatie.Db.Entities.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Flatie.Db.Entities.QuietHourImportance", b =>
                {
                    b.Navigation("QuietHours");
                });

            modelBuilder.Entity("Flatie.Db.Entities.ShoppingListCategory", b =>
                {
                    b.Navigation("ShoppingLists");
                });

            modelBuilder.Entity("Flatie.Db.Entities.User", b =>
                {
                    b.Navigation("Guests");

                    b.Navigation("HomeSpaceMembers");

                    b.Navigation("Notifications");

                    b.Navigation("QuietHours");

                    b.Navigation("ShoppingLists");

                    b.Navigation("UserTasks");
                });

            modelBuilder.Entity("Flatie.Db.Entities.UserAppRole", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
